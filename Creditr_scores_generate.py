# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12FJt06T0DBM-jjPo8XiXRhV2CeNn2Ies
"""

import json

with open("/content/user-wallet-transactions.json","r") as f:
  data=json.load(f)

import pandas as pd


df=pd.DataFrame(data)
df.head()

data[0]

df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')
df.head(1)

def extract_amount_usd_token_dict(row):
    try:
        amount_raw = float(row.get('amount', 0))
        price_usd = float(row.get('assetPriceUSD', 1))
        token = row.get('assetSymbol', 'UNKNOWN')
        amount_usd = (amount_raw / 1e6) * price_usd  # for USDC-style tokens
    except:
        amount_usd = 0
        token = 'UNKNOWN'
    return pd.Series([amount_usd, token])

df[['amount_usd', 'token']] = df['actionData'].apply(extract_amount_usd_token_dict)

df[['action', 'amount_usd', 'token']].head(10)

def extract_amount_usd_token_fixed(row):
    try:
        amount_raw = float(row.get('amount', 0))
        price_usd = float(row.get('assetPriceUSD', 1))
        token = row.get('assetSymbol', 'UNKNOWN')

        # Define decimal places by token
        decimals = {
            'USDC': 6,
            'USDT': 6,
            'DAI': 18,
            'WMATIC': 18,
            'WETH': 18,
            'WBTC': 8,
        }
        token_decimals = decimals.get(token.upper(), 18)  # default to 18

        amount_usd = (amount_raw / (10 ** token_decimals)) * price_usd

    except Exception:
        amount_usd = 0
        token = 'UNKNOWN'
    return pd.Series([amount_usd, token])

df[['amount_usd', 'token']] = df['actionData'].apply(extract_amount_usd_token_fixed)

df[['action', 'amount_usd', 'token']].head(10)

grouped = df.groupby('userWallet')
features = []

for wallet, group in grouped:
    f = {}
    f['wallet'] = wallet
    f['tx_count'] = len(group)
    f['unique_actions'] = group['action'].nunique()
    f['total_deposit'] = group[group['action'] == 'deposit']['amount_usd'].sum()
    f['total_borrow'] = group[group['action'] == 'borrow']['amount_usd'].sum()
    f['total_repay'] = group[group['action'] == 'repay']['amount_usd'].sum()
    f['total_redeem'] = group[group['action'] == 'redeemunderlying']['amount_usd'].sum()
    f['total_liquidation'] = group[group['action'] == 'liquidationcall']['amount_usd'].sum()

    # Active duration and frequency
    f['active_days'] = (group['timestamp'].max() - group['timestamp'].min()).days + 1
    f['tx_per_day'] = f['tx_count'] / f['active_days'] if f['active_days'] > 0 else f['tx_count']

    # Ratios
    f['borrow_to_deposit'] = f['total_borrow'] / f['total_deposit'] if f['total_deposit'] > 0 else 0
    f['repay_ratio'] = f['total_repay'] / f['total_borrow'] if f['total_borrow'] > 0 else 1.0

    features.append(f)

features_df = pd.DataFrame(features)

from sklearn.preprocessing import MinMaxScaler

score_features = ['total_deposit', 'repay_ratio', 'tx_per_day']
scaler = MinMaxScaler()
scaled = scaler.fit_transform(features_df[score_features])

# Weighted score formula (can be adjusted)
features_df['credit_score'] = (scaled[:, 0]*0.4 + scaled[:, 1]*0.4 + scaled[:, 2]*0.2) * 1000
features_df['credit_score'] = features_df['credit_score'].astype(int)

features_df[['wallet', 'credit_score']].to_csv('wallet_credit_scores.csv', index=False)

import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(features_df['credit_score'], bins=10, kde=True)
plt.title("Credit Score Distribution")
plt.xlabel("Score")
plt.ylabel("Wallet Count")
plt.savefig("score_distribution.png")
plt.show()

from google.colab import files
files.download('wallet_credit_scores.csv')
files.download('Untitled0.ipynb')